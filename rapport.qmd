# Projet Black Jack
Noms : Lancelot Ravier, Danielle El khoury, Garance Malnoë
Idée de projet : Jeu de blackjack codé en Julia avec une interface graphique et en R avec Shiny.

# Déroulement d'une partie (sans les mises): 
- 6 jeux de carte sont défini et mélangé (52 cartes, pas de joker)
- Le joueur appuie sur un bouton pour démarrer la partie
- Le programme distribue deux cartes retournées au joueur
- Le programme distribue une carte retournée et une carte cachée a l'ordi
- Les points sont calculés et affichés au joueur
- Le joueur doit choisir entre laisser l'ordi jouer ou retirer une carte
- *S'il décide de tirer une carte :
    - Si le nombre de points est = 21, il a gagné et le jeu s'arrette
    - Si le nombre de points est >21, il a perdu et le jeu s'arrette
    - Si le nombre de points inferieur à 21, il peut décider de rejouer* ou de s'arretter**
- **S'il décide de s'arretter, l'ordi va retourner la carte cachée :
    - Si il tombe sur 21, l'ordi gagne
    - Si son nombre de points est inferieur à 18, il retourne une carte
    - Si son nombre de points est superieur à 18 (entre 18 et 21), il s'arrette
    - Si son nombre de points est superieur à 21, le joueur gagne

Points par carte : 
    - 2 à 10 = valeur
    - Valet, dame, roi = 10
    - As =
        - 11 si en ajoutant 11 à la main, le score <=21
        - 1 si en ajoutant 11, le score dépasse 21

# Structure du projet en Julia :
- Fichier main.jl : fonction générale avec les boucles de jeu.
- Fichier carte.jl : Pour définir la classe carte (attributs : String nom, Int valeur, image interface graphique)
- Fichier deck.jl : Pour définir la classe deck (attributs : list de carte. Méthode : distribuer une carte (choisir une carte au hasard, la mettre dans la main de quelquu'un et l'enlever dans la liste de carte du deck))  Note : 6x52 cartes pour 1 deck de base.
- Fichier jeu.jl : Pour définir la classe de jeu (attributs : deck, deux main_cartes (ordi + joueur))

# Idées supplémentaires :
    - Bet
    - Plusieurs joueurs
    - Timer

Jeudi 26/09 : Choix du sujet, écriture des règles et idées supplémentaires et définition de la structure du projet en Julia (classes). Création des fichiers pour les différentes classes et tentative (infructueuse) de définition d'une classe en Julia avec la classe carte.

Mardi 01/10 : 
Mise en commun de ce qu'a cherché Lancelot durant le weekend : fonction de création de carte, de deck de 52 cartes, de deck de blackjack et mélanger un deck. 
Reflexions sur l'affichage : dash.jl, maki.jl, pluto.jl -> pour faire du html / javascript et avoir quelque chose d'intéractif. Question en cours sur les notions de simple vs multiple dispatching expliqué par Remy.
Galères avec github : on choisit de partir sur un fonctionnement en branches ou en fork pour séparer notre travail.

Mercredi 02/10 : Ré-adaptation des fonction de création de deck de blackjack et de mélange de deck. On a créé 2 fonctions shuffle et shuffle!  dans le but d'éviter de devoir recréer le deck de blackjack à chaque partie (dans une session), seulement au début de la session ce qui parait plus optimisé. 
Problématique pour surcharger / étendre les fonction shuffle(!) déjà existantes dans la librairie Random, on l'importe explicitement.
Creation des fonctions de calculs de la valeur d'une main et de tirer une carte.
Première boucle de jeu à 1 joueur basique. On a appris comment demander à un utilisateur de rentrer quelque chose dans le terminal.
Choix d'avoir une seule struct Deck à la fois pour le paquet de carte et pour les mains puisque les deux sont composés d'un vect de Carte.

Jeudi 03/10:
Mise en commun de ce que chacun a fait Mercredi. On a réparé et amélioré les boucles d'affichage de la valeur d'une main et de la boucle de jeu (problèmes sur les conditions de fin de jeu) et création d'une fonction d'affichage de la main du joueur (les cartes). On a fait plusieurs parties pour tester (et repérer les erreurs). On s'est rendu compte qu'il y avait une version amércaine et une version européenne des règles, on décide de partir sur la version européenne pour le moment car la règle supplémentaire des américains est basée sur la notion de pari / bet que l'on a pas encore implémentée. On a appris à faire concaténation de String avec s1 * s2.

Mardi 08/10 :
On a appris à créer des pull request et résoudre les conflits sur GitHub à partir du travail qu'avait fait Danielle durant le weekend. Création de module pour les appeler dans pluto. Création du pluto avec les fonctions dedans. Vizagrams -> Création de svg qui s'affichents dans pluto.

Jeudi 10/10 : Version de Python. Semble + lente mais à tester précisément, avantage c'est qu'on a pas à tapper 2 fois dans la console comme en Julia donc évite les "erreurs" dans le terminal, simple à mettre en place une fois qu'on a fait le travail en Julia.

Mardi 15/10 : Corrections du code pour tout mettre en anglais. On a essayé de faire l'affichage avec Pluto et autres packages d'affichage. 

Trucs à faire :
- Regarder comment on fait de la documentation en Julia.
- Choisir anglais ou francais et s'y tenir -> Plutôt anglais ?
Gary :
- Faire un projet pour benchmark R et Julia
- Tester avec PythonCall dans Julia pour les tester en même temps pour n=10 000
Danielle :
- Coder le blackjack en R
Lancelot :
- Interface graphique pluto pour le jeu en Julia

Jeudi 10/10:
En codant dans R: On a vu vraimant la difference entre R et Julia. Julia ne change pas la classe des var en utilisant des fonction, alors que dans R, par exemple: en appliquant la fct "sample" elle change la classe deck en une classe list 
pour laisser la classe telle quelle, on a utiliser Deck(sample(...)).
On a aussi utiliser explicitement le single dispatching dans R en utilisant pour shuffle la UseMethod



